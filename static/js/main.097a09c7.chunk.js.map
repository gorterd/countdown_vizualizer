{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["StackFrame","arg","resumePrev","pushFrame","output","popFrame","useState","curLine","setCurLine","evalLineFunctions","useMemo","switchLine","line","setTimeout","0","1","2","5","6","key","7","useEffect","arrow","className","style","width","FrameVizualizer","frames","setFrames","outputContent","setOutputContent","callbacks","props","newFrame","oldFrames","text","oldOutput","slice","length","map","idx","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4PAoDA,SAASA,EAAT,GAAuE,IAAjDC,EAAgD,EAAhDA,IAAKC,EAA2C,EAA3CA,WAAYC,EAA+B,EAA/BA,UAAWC,EAAoB,EAApBA,OAAQC,EAAY,EAAZA,SAAY,EACtCC,mBAAS,GAD6B,mBAC7DC,EAD6D,KACpDC,EADoD,KAG9DC,EAAoBC,mBAAS,WACjC,SAASC,EAAWC,GAClBC,YAAW,kBAAML,EAAWI,KAAO,MAGrC,MACE,CACEE,EAAG,WAECH,EADU,IAARV,EACS,EAEA,IAGfc,EAAG,WACDX,EAAO,aACPO,EAAW,IAEbK,EAAG,WACDH,WAAWR,EAAU,OAEvBY,EAAG,WACDb,EAAOH,GACPU,EAAW,IAEbO,EAAG,WACDL,YAAY,kBAAMV,EAAU,CAC1BgB,IAAKlB,EAAM,EACXA,IAAKA,EAAM,EACXC,WAAY,kBAAMS,EAAW,QAC3B,OAENS,EAAG,WACDP,WAAWR,EAAU,UAI1B,CAACJ,EAAKG,EAAQC,EAAUF,IAE3BkB,qBAAU,WACRZ,EAAkBF,OACjB,CAACA,EAASE,IAEbY,qBAAU,kBAAM,kBAAMnB,OAAc,CAACA,IAErC,IAAMoB,EAAQ,SAACV,GAAD,OAAU,+BAAOL,IAAYK,EAAO,KAAO,QAEzD,OACE,sBAAKW,UAAU,QAAQC,MAAO,CAACC,MAAO,IAAa,GAANxB,GAA7C,UACE,4CAAc,+BAAOA,IAArB,OACA,qDACA,gCAAMqB,EAAM,GAAZ,iBACA,gCAAMA,EAAM,GAAZ,uBACA,gCAAMA,EAAM,GAAZ,gBACA,gCAAMA,EAAM,GAAZ,WACA,qBAAKC,UAAU,QAAf,SAAwBD,EAAM,KAC9B,gCAAMA,EAAM,GAAZ,WACA,gCAAMA,EAAM,GAAZ,wBACA,gCAAMA,EAAM,GAAZ,YAKSI,MAnHf,WAA4B,IAAD,EACGpB,mBAAS,IADZ,mBAClBqB,EADkB,KACVC,EADU,OAEiBtB,mBAAS,IAF1B,mBAElBuB,EAFkB,KAEHC,EAFG,KAiBnBC,EAAY,CAAE5B,UAbpB,SAAmB6B,GACjB,IAAMC,EAAW,cAACjC,EAAD,2BAAgBgC,GAAWD,IAC5CH,GAAW,SAAAM,GAAS,OAAKD,GAAL,mBAAkBC,QAWT9B,OAR/B,SAAgB+B,GACdL,GAAkB,SAAAM,GAAS,4BAAQA,GAAR,CAAmBD,QAOT9B,SAJvC,WACEuB,GAAU,SAAAM,GAAS,OAAIA,EAAUG,MAAM,QAoBzC,OAfAhB,qBAAU,WACc,IAAlBM,EAAOW,QACTzB,YAAW,WACTe,EAAU,CACR,cAAC5B,EAAD,aAEEC,IAAK,EACLC,WAAY,kBAAM4B,EAAiB,MAC/BC,GAHC,OAMR,SAKL,iCACE,yBAASR,UAAU,SAAnB,SACGI,IAEH,0BAASJ,UAAU,SAAnB,UACE,oDACA,qBAAKA,UAAU,UAAf,SACGM,EAAcU,KAAI,SAACJ,EAAMK,GAAP,OAAe,4BAAcL,GAANK,eCjCrCC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.097a09c7.chunk.js","sourcesContent":["import './App.css';\nimport { useEffect, useState, useMemo } from 'react';\n\nfunction FrameVizualizer() {\n  const [frames, setFrames] = useState([]);\n  const [outputContent, setOutputContent] = useState([]);\n\n  function pushFrame(props) {\n    const newFrame = <StackFrame {...props} {...callbacks} />\n    setFrames( oldFrames => [newFrame, ...oldFrames]);\n  }\n\n  function output(text) {\n    setOutputContent( oldOutput => [...oldOutput, text]);\n  }\n\n  function popFrame() {\n    setFrames(oldFrames => oldFrames.slice(1));\n  }\n\n  const callbacks = { pushFrame, output, popFrame };\n\n  useEffect(() => {\n    if (frames.length === 0) {\n      setTimeout(() => {\n        setFrames([\n          <StackFrame\n            key={3}\n            arg={3}\n            resumePrev={() => setOutputContent([])}\n            {...callbacks}\n          />\n        ]);\n      }, 1500);\n    }\n  });\n\n  return (\n    <main>\n      <section className=\"frames\">\n        {frames}\n      </section>\n      <section className=\"output\">\n        <h1>Console / Terminal</h1>\n        <div className=\"console\">\n          {outputContent.map((text, idx) => <p key={idx}>{text}</p>)}\n        </div>\n      </section>\n    </main>\n  )\n}\n\nfunction StackFrame({ arg, resumePrev, pushFrame, output, popFrame }) {\n  const [curLine, setCurLine] = useState(0);\n\n  const evalLineFunctions = useMemo( () => {\n    function switchLine(line) {\n      setTimeout(() => setCurLine(line), 1600)\n    }\n\n    return (\n      {\n        0: () => {\n          if (arg === 0) {\n            switchLine(1)\n          } else {\n            switchLine(5)\n          }\n        },\n        1: () => {\n          output(\"lift off!\");\n          switchLine(2)\n        },\n        2: () => {\n          setTimeout(popFrame, 1400);\n        },\n        5: () => {\n          output(arg);\n          switchLine(6)\n        },\n        6: () => {\n          setTimeout( () => pushFrame({\n            key: arg - 1,\n            arg: arg - 1,\n            resumePrev: () => switchLine(7)\n          }), 1600);\n        },\n        7: () => {\n          setTimeout(popFrame, 1400);\n        }\n      }\n    );\n  }, [arg, output, popFrame, pushFrame]);\n\n  useEffect(() => {\n    evalLineFunctions[curLine]();\n  }, [curLine, evalLineFunctions])\n\n  useEffect(() => () => resumePrev(), [resumePrev]);\n\n  const arrow = (line) => <span>{curLine === line ? \"=>\" : \"  \"}</span>;\n\n  return (\n    <div className=\"frame\" style={{width: 200 + (arg * 30)}}>\n      <h1>countdown(<span>{arg}</span>)</h1>\n      <pre>  def countdown(n)</pre>\n      <pre>{arrow(0)}  if n == 0</pre>\n      <pre>{arrow(1)}    p \"lift off!\"</pre>\n      <pre>{arrow(2)}    return</pre>\n      <pre>{arrow(3)}  end</pre>\n      <pre className=\"small\">{arrow(4)}</pre>\n      <pre>{arrow(5)}  p n</pre>\n      <pre>{arrow(6)}  countdown(n - 1)</pre>\n      <pre>{arrow(7)}end</pre>\n    </div>\n  );\n}\n\nexport default FrameVizualizer;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}